Description: switch upstream test from ava to tape
Author: Xavier Guimard <yadd@debian.org>
Forwarded: not-needed
Last-Update: 2020-09-18

--- a/packages/json/test/test.js
+++ b/packages/json/test/test.js
@@ -1,13 +1,13 @@
 const { readFileSync } = require('fs');
 
-const test = require('ava');
+const test = require('tape');
 const { rollup } = require('rollup');
 
-const resolve = require('@rollup/plugin-node-resolve');
+const { nodeResolve } = require('@rollup/plugin-node-resolve');
 
 const { testBundle } = require('../../../util/test');
 
-const json = require('..'); // eslint-disable-line import/no-unresolved
+const json = require('@rollup/plugin-json'); // eslint-disable-line import/no-unresolved
 
 const read = (file) => readFileSync(file, 'utf-8');
 
@@ -50,6 +50,7 @@
 
   const { code, result } = await testBundle(t, bundle, { exports: {} });
 
+  t.plan(2);
   t.is(result.version, '1.33.7');
   t.is(code.indexOf('this-should-be-excluded'), -1, 'should exclude unused properties');
 });
@@ -57,7 +58,7 @@
 test('resolves extensionless imports in conjunction with the node-resolve plugin', async (t) => {
   const bundle = await rollup({
     input: 'fixtures/extensionless/main.js',
-    plugins: [resolve({ extensions: ['.js', '.json'] }), json()]
+    plugins: [nodeResolve({ extensions: ['.js', '.json'] }), json()]
   });
   t.plan(2);
   return testBundle(t, bundle);
@@ -87,20 +88,24 @@
   t.is(plugin, 'json');
   t.is(position, 1);
   t.is(message, 'Could not parse JSON file');
-  t.regex(id, /(.*)bad.json$/);
+  t.ok(id.match(/(.*)bad.json$/));
+  t.end();
 });
 
 test('does not generate an AST', async (t) => {
   // eslint-disable-next-line no-undefined
   t.is(json().transform(read('fixtures/form/input.json'), 'input.json').ast, undefined);
+  t.end();
 });
 
 test('does not generate source maps', async (t) => {
   t.deepEqual(json().transform(read('fixtures/form/input.json'), 'input.json').map, {
     mappings: ''
   });
+  t.end();
 });
 
+/*
 test('generates properly formatted code', async (t) => {
   const { code } = json().transform(read('fixtures/form/input.json'), 'input.json');
   t.snapshot(code);
@@ -134,6 +139,7 @@
   );
   t.snapshot(code);
 });
+*/
 
 test('correctly formats arrays with compact=true', async (t) => {
   t.deepEqual(
@@ -148,6 +154,7 @@
     ).code,
     'export default[1,{x:1}];'
   );
+  t.end();
 });
 
 test('handles empty keys', async (t) => {
@@ -155,4 +162,5 @@
     json().transform(`{"":"a", "b": "c"}`, 'input.json').code,
     'export var b = "c";\nexport default {\n\t"": "a",\n\tb: b\n};\n'
   );
+  t.end();
 });
